# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    database_driver: pdo_mysql
    database_host: '%env(DATABASE_HOST)%'
    database_port: '%env(DATABASE_PORT)%'
    database_name: '%env(DATABASE_NAME)%'
    database_user: '%env(DATABASE_USER)%'
    database_password: '%env(DATABASE_PASSWORD)%'
    base_host: '%env(BASE_HOST)%'
    mailer_transport: smtp
    mailer_host: 127.0.0.1
    mailer_user: null
    mailer_password: null
    locale: fr
    secret: '%env(APP_SECRET)%'
    database_path: null
    mail_contact: contact@ninjatooken.fr
    mail_admin: arhennequin@gmail.com
    mail_name: no-reply
    unity.version: '%env(UNITY_VERSION)%'
    unity.crypt: '%env(UNITY_KEY)%'
    banned.ip: {  }
    akismet.active: '%env(AKISMET_ACTIVE)%'
    akismet.key: '%env(AKISMET_KEY)%'
    akismet.url: "http://%base_host%"
    numReponse: 20
    paypal.donate: false
    paypal.code: null
    class:
        eau: Suiton
        vent: Futon
        feu: Katon
        foudre: Raiton
        terre: Doton
    kernel.default_locale: fr
    discord:
        serverId: '%env(DISCORD_SERVER_ID)%'
        channelId: '%env(DISCORD_CHANNEL_ID)%'
    imgur:
        clientId: '%env(IMGUR_CLIENTID)%'
        clientSecret: '%env(IMGUR_CLIENTSECRET)%'
    html_purifier:
        full:
            HTML.Trusted: true
            Core.Encoding: 'UTF-8'
            HTML.Doctype: 'XHTML 1.0 Transitional'
            HTML.DefinitionID: 'enduser-customize.html ninjatooken'
            HTML.DefinitionRev: 1
            HTML.Allowed: 'h3[style|align],h4[style|align],h5[style|align],h6[style|align],p[style|align],span[style],ul,li[style],a[href|target],strong,b,em,i,u,strike,br,img[src|width|height|alt|align],legend,fieldset,object[width|height|codebase|classid],param[name|value],embed[type|width|height|src],iframe[frameborder|marginheight|marginwidth|scrolling|src|height|width],font[face|size|color]'
            HTML.TargetBlank: true
            AutoFormat.Linkify: true
            CSS.AllowedProperties:  'text-decoration,text-align,color,font,font-family,font-size,font-style,font-weight,float,clear'
            HTML.SafeObject: true
            HTML.SafeEmbed: true
            Output.FlashCompat: true
            HTML.FlashAllowFullScreen: true
            URI.DisableExternalResources: false
            Core.RemoveInvalidImg: true
            URI.Base: 'http://www.ninjatooken.fr'
            URI.MakeAbsolute: true
        medium:
            Core.Encoding: 'UTF-8'
            HTML.Allowed: 'p,span,li,strong,b,em,i,strike,br,'
            HTML.TargetBlank: true
            CSS.AllowedProperties:  'color,font,font-weight'
        min:
            Core.Encoding: 'UTF-8'
            HTML.Allowed: 'p,strong,b,em,i,strike,'
            AutoFormat.RemoveEmpty: true
            AutoFormat.RemoveEmpty.RemoveNbsp : true
            CSS.AllowedProperties:  'color,font,font-weight'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - '%env(DATABASE_URL)%'
            - { db_table: 'session', db_id_col: 'session_id', db_data_col: 'session_value', db_time_col: 'session_time', db_lifetime_col: 'session_lifetime' }
            # If you get transaction issues (e.g. after login) uncomment the line below
            # - { lock_mode: 1 }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    kernel.listener.ninjatooken_exception_listener:
        class: App\Listener\NinjaTookenExceptionListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

    ninjatooken_clan.clan_listener:
        class: App\Listener\ClanListener
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    ninjatooken_clan.clan_proposition_listener:
        class: App\Listener\ClanPropositionListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postRemove }

    ninjatooken_clan.clan_postulation_listener:
        class: App\Listener\ClanPostulationListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postPersist }

    ninjatooken_clan.clan_utilisateur_listener:
        class: App\Listener\ClanUtilisateurListener
        tags:
            - { name: doctrine.event_listener, event: postRemove }
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postPersist }

    ninjatooken_forum.thread_listener:
        class: App\Listener\ThreadListener
        tags:
            - { name: doctrine.event_listener, event: postRemove }
            - { name: doctrine.event_listener, event: postPersist }

    ninjatooken_forum.comment_listener:
        class: App\Listener\CommentListener
        arguments: ["@request_stack", "%akismet.active%", "%akismet.key%", "%akismet.url%" ]
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postRemove }

    ninjatooken_user.message_user_listener:
        class: App\Listener\MessageUserListener
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    ninjatooken_user_listener:
        class: App\Listener\LoginListener
        arguments: ['@security.authorization_checker', '@doctrine']
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    ninjatooken_game.gamedata:
        class: App\Utils\GameData

    security.access.blacklist_voter:
        class:      App\Security\Authorization\Voter\ClientIpVoter
        arguments:  ["@request_stack", "%banned.ip%"]
        public:     false
        tags:
            - { name: security.voter }

    ninjatooken_user.type.ip:
        class: App\Form\Type\IpType
        tags:
            - { name: form.type, alias: ip }

## admin

    block.recent_comments:
        class: App\Block\RecentCommentsBlockService
        tags:
            - { name: sonata.block }
        arguments: ['@twig', '@doctrine.orm.entity_manager']

    admin.clan:
        class: App\Admin\ClanAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: clan, label: Clan }
        arguments: [ ~, App\Entity\Clan\Clan, ~]
        calls:
            - [ addChild, [ '@admin.forum', 'clan' ] ]
            - [ addChild, [ '@admin.clan_utilisateur', 'clan' ] ]
            - [ addChild, [ '@admin.clan_postulation', 'clan' ] ]

    admin.clan_utilisateur:
        class: App\Admin\ClanUtilisateurAdmin
        arguments: [~, App\Entity\Clan\ClanUtilisateur, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: clan, label: Membre}

    admin.clan_postulation:
        class: App\Admin\ClanPostulationAdmin
        arguments: [~, App\Entity\Clan\ClanPostulation, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: clan, label: Postulation}

    admin.clan_proposition:
        class: App\Admin\ClanPropositionAdmin
        arguments: [~, App\Entity\Clan\ClanProposition, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: clan, label: Proposition}

    admin.forum:
        class: App\Admin\ForumAdmin
        arguments: [ ~, App\Entity\Forum\Forum, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: forum, label: Forum }
        calls:
            - [ addChild, [ '@admin.thread', 'forum' ] ]

    admin.thread:
        class: App\Admin\ThreadAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: forum, label: Topic }
        arguments: [ ~, App\Entity\Forum\Thread, ~]
        calls:
            - [ addChild, [ '@admin.comment', 'thread' ] ]

    admin.comment:
        class: App\Admin\CommentAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: forum, label: Commentaire, default: true }
        arguments: [ ~, App\Entity\Forum\Comment, ~]

    admin.comment_user:
        class: App\Admin\CommentUserAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Commentaire }
        arguments: [ ~, App\Entity\Forum\Comment, ~]

    admin.ninja:
        class: App\Admin\NinjaAdmin
        arguments: [~, App\Entity\Game\Ninja, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: admin, label: Ninja}

    admin.user:
        class: App\Admin\UserAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: user, label: Utilisateur, default: true }
        arguments: [~, App\Entity\User\User, ~]
        calls:
            - [ addChild, [ '@admin.detection', 'user' ] ]
            - [ addChild, [ '@admin.message', 'author' ] ]
            - [ addChild, [ '@admin.comment_user', 'author' ] ]
            - [ addChild, [ '@admin.friend', 'user' ] ]
            - [ addChild, [ '@admin.capture', 'user' ] ]
            - [ addChild, [ '@admin.clan_proposition', 'recruteur' ] ]

    admin.message:
        class: App\Admin\MessageAdmin
        arguments: [~, App\Entity\User\Message, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: user, label: Messagerie}

    admin.message_user:
        class: App\Admin\MessageUserAdmin
        arguments: [~, App\Entity\User\MessageUser, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: admin, label: MessageUser}

    admin.friend:
        class: App\Admin\FriendAdmin
        arguments: [~, App\Entity\User\Friend, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: user, label: Ami}

    admin.capture:
        class: App\Admin\CaptureAdmin
        arguments: [~, App\Entity\User\Capture, ~]
        tags:
            - {name: sonata.admin, manager_type: orm, group: user, label: Capture d'écran}

    admin.ip:
        class: App\Admin\IpAdmin
        tags:
            - {name: sonata.admin, manager_type: orm, group: admin, label: Ip, default: true}
        arguments: [~, App\Entity\User\Ip, ~]

    admin.detection:
        class: App\Admin\DetectionAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: user, label: Détection multi-compte par ip }
        arguments: [ ~,  App\Entity\User\Ip, App\Controller\DetectionAdminController]
